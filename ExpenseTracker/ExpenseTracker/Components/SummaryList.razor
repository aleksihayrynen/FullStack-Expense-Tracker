@using ExpenseTracker.Models.Services
@using ExpenseTracker.Models
@inject IJSRuntime JS
@inject GetItemService GetItemService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using MongoDB.Bson;
@using ExpenseTracker.Models.Utils;


<h3 class="Expense_title" style="margin-bottom:20px">Summary(@_startDate?.ToString("dd/MM/yyyy") - @_endDate?.ToString("dd/MM/yyyy"))</h3>
<!-- Need to fix the layout responsivesness for flexbox in smaller screens-->
<div class="Expense_filterbar" style="display:flex; gap:50px ; margin-bottom:10px">
    <div class="Expense_filterbar_buttons">
        <button class="btn btn-outline-primary me-2" @onclick="FilterToday">Today</button>
        <button class="btn btn-outline-primary me-2" @onclick="FilterMonthly">Monthly</button>
        <button class="btn btn-outline-primary" @onclick="FilterYearly">Yearly</button>
    </div>
    <div class="Date_input_div" style="display:flex; gap:10px">
        <InputDate @bind-Value="StartDate" class="form-control"  style="width:50%"/>
        <InputDate @bind-Value="EndDate" class="form-control" style="width:50%" />
    </div>
</div>

<div id="myChartContainer" style="height: 450px; width: 100%;"></div>

<div class="total_boxes">
    <div class="total-box">
        <p>Expenses: </p>
        <h3>@totalExpenses €</h3>
    </div>
    <div class="total-box">
        <p>Income: </p>
        <h3>@totalIncome €</h3>
    </div>
    <div class="total-box">
        <p>Balance </p>
        <h3>@balance €</h3>
    </div>
</div>


<br />
<div class="expense_list_infobar">
    @if (searchActive)
    {
        <p class="List_count">@(filteredItems == null || !filteredItems.Any() ? "0 items found" : $"Item count: {pagedItems.Count()}")</p>
    }
    <p class="List_count">@(filteredItems == null || !filteredItems.Any() ? "0 Items found" : $"Item count: {ItemCountByDate}")</p>
    <div class="search_button-container">
        <button class="btn btn-sm btn-success" @onclick="ApplySearchFilters">Search</button>
        @if (searchActive)
        {
            <button type="button" class="btn btn-sm btn-secondary" @onclick="ClearFilters">Clear</button>
        }
    </div>
</div>



@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert" style="display:flex; justify-content:center">
        @errorMessage
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Type</th>
                <th>
                    <div class="filter_by_date_container">
                        Amount
                        <img src="Media/@(selectedSort == "AmountDesc" ? "filter_arrow_desc.png" : "filter_arrow_asc.png")"
                        @onclick="ToggleAmountSort" />
                    </div>
                </th>
                <th>Category</th>
                <th>
                    <div class="filter_by_date_container">
                        Date
                        <img src="Media/@(selectedSort == "DateDesc" ? "filter_arrow_desc.png" : "filter_arrow_asc.png")"
                        @onclick="ToggleDateSort" />
                    </div>
                </th>
                <th>Actions</th>
            </tr>
            <tr>
                <th>
                    <InputText @bind-Value="searchTitle" class="form-control form-control-sm" placeholder="Search..." />
                </th>
                <th></th>
                <th></th>
                <th>
                    <InputText @bind-Value="searchCategory" class=" form-control form-control-sm" placeholder="Search..." />
                </th>
                <th>

                </th>
                <th>
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <select class="form-select form-select-sm" style="width: auto;" @onchange="OnPageSizeChanged">
                            <option value="5" selected="@(pageSize == 5)">5</option>
                            <option value="10" selected="@(pageSize == 10)">10</option>
                            <option value="20" selected="@(pageSize == 20)">20</option>
                            <option value="50" selected="@(pageSize == 50)">50</option>
                        </select>
                    </div>
                </th>
            </tr>
        </thead>
        <tbody>
            @if ((pagedItems) != null && (pagedItems.Any()))
            {
                @foreach (var item in pagedItems)
                {
                    if (item.IsBeingEdited)
                    {
                        <tr>
                            <td><input class="form-control" @bind="item.Title" /></td>
                            <td>
                                <select class="form-control" @bind="item.Type">
                                    <option value="Expense">Expense</option>
                                    <option value="Income">Income</option>
                                </select>
                            </td>
                            <td><input type="number" class="form-control" @bind="item.Amount" /></td>
                            <td><input class="form-control" @bind="item.Category" /></td>
                            <td><input type="date" class="form-control" @bind="item.Date" /></td>

                            <td>
                                <div style="display:flex">
                                    <button class="btn btn-success btn-sm me-1" @onclick="() => SaveEdit(item)">Save</button>
                                    <button class="btn btn-secondary btn-sm" @onclick="() => CancelEdit(item)">Cancel</button>
                                </div>
                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td>@item.Title</td>
                            <td class="type_td @(item.Type == "Expense" ? "text-danger" : "text-success")">
                                @item.Type
                            </td>
                            <td class="amount_td @(item.Type == "Expense" ? "text-danger" : "text-success")">
                                @(item.Type == "Expense" ? $"-{item.Amount} €" : $"+{item.Amount} €")
                            </td>
                            <td>@UtilityFunctions.CapitalizeFirstLetter(item.Category)</td>
                            <td>@item.Date.ToLocalTime().ToString("dd/MM/yyyy")</td>
                            <td>
                                @if (itemToConfirmDelete == item._id)
                                {
                                    <p>Delete the item?</p>
                                    <button class="btn btn-sm btn-danger me-1" @onclick="() => ConfirmDelete(item)">Delete</button>
                                    <button class="btn btn-sm btn-secondary" @onclick="CancelDelete">Cancel</button>
                                }
                                else
                                {
                                    <button class="btn btn-sm btn-primary me-1" @onclick="() => EditExpense(item)">Edit</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteConfirmation(item)">Delete</button>
                                }
                            </td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
    <div class="pagination-controls mt-3" style="display: flex; align-items: center; gap: 10px;">
        <button class="btn btn-sm btn-outline-primary" @onclick="@(() => PageChange(-1))" disabled="@(pageNumber == 1)">Previous</button>
        <span>Page @pageNumber of @Math.Ceiling((double)ItemCountByDate / pageSize)</span>
        <button class="btn btn-sm btn-outline-primary" @onclick="@(() => PageChange(1))"disabled="@(pageNumber >= Math.Ceiling((double)ItemCountByDate / pageSize))">Next</button>
    </div>
}

@code {
        //List initializations
    private List<Income>? incomes;
    private List<Expense>? expenses;
    private List<SummaryItem> filteredItems = new();
    private List<SummaryItem> pagedItems = new();

    //Common variables used in initz HTML
    private string selectedFilter = "SelectedDates";  //Default dates when entering page is Monthly  view of starting from 1st  to 30-31st. Initialized below in _endDate & _startDate properties
    private bool shouldRenderCharts = false;
    private string? errorMessage;
    private decimal totalExpenses;
    private decimal totalIncome;
    private decimal balance;
    private int ItemCountByDate;

    //Edit and Delete variables
    private ObjectId? itemToConfirmDelete = null;
    private SummaryItem? backupItem;

    //Search field variables
    private string searchTitle = "";
    private string searchCategory = "";
    private bool sortByAmount = false;
    private bool searchActive = false;
    private string selectedSort = "DateAsc"; // "DateAsc", "DateDesc", "AmountAsc", "AmountDesc"
    private bool isSearchCooldown = false;


    //Page variables
    private int pageNumber = 1;
    private int pageSize = 10;


    //Load the initial Expense datea on page reload
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                expenses = await GetItemService.GetUserExpensesAsync(userId);
                incomes = await GetItemService.GetUserIncomesAsync(userId);
                filteredItems = GetFilteredItems(pageNumber, pageSize);
                shouldRenderCharts = true;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldRenderCharts && expenses != null)
        {
            await RenderChartsAsync();

            shouldRenderCharts = false; // prevent infinite rerender
        }
    }



    private async Task RenderChartsAsync()
    {
        if (!_startDate.HasValue || !_endDate.HasValue) return;

        bool useDays = (_endDate.Value - _startDate.Value).TotalDays <= 31;

        var xAxisLabels = GenerateXAxisLabels(_startDate.Value, _endDate.Value, useDays);
        var chartData = PrepareChartData(filteredItems, xAxisLabels, useDays);

        await JS.InvokeVoidAsync("renderHighchartsSummaryChart", "myChartContainer", chartData, useDays);
    }


    #region SummaryChart helper
    private List<string> GenerateXAxisLabels(DateTime startDate, DateTime endDate, bool useDays)
    {
        if (useDays)
        {
            return Enumerable.Range(0, (endDate - startDate).Days + 1)
                .Select(offset => startDate.AddDays(offset).ToString("dd/MM"))
                .ToList();
        }
        else
        {
            var start = new DateTime(startDate.Year, startDate.Month, 1);
            var end = new DateTime(endDate.Year, endDate.Month, 1);
            var months = new List<string>();

            for (var dt = start; dt <= end; dt = dt.AddMonths(1))
            {
                months.Add(dt.ToString("yyyy-MM"));
            }

            return months;
        }
    }

    private List<object> PrepareChartData(IEnumerable<SummaryItem> items, List<string> xAxisLabels, bool useDays)
    {
        var expensesByDate = items
            .Where(e => e.Type == "Expense")
            .GroupBy(e => useDays
                ? e.Date.Date.ToString("dd/MM")
                : e.Date.ToString("yyyy-MM"))
            .ToDictionary(g => g.Key, g => g.Sum(e => e.Amount));

        var incomesByDate = items
            .Where(e => e.Type == "Income")
            .GroupBy(e => useDays
                ? e.Date.Date.ToString("dd/MM")
                : e.Date.ToString("yyyy-MM"))
            .ToDictionary(g => g.Key, g => g.Sum(e => e.Amount));

        return xAxisLabels.Select(label => new
        {
            label,
            expense = expensesByDate.ContainsKey(label) ? expensesByDate[label] : 0,
            income = incomesByDate.ContainsKey(label) ? incomesByDate[label] : 0
        }).Cast<object>().ToList();
    }
    #endregion


    #region EditDelete
    //Edit and Delete functions
    /******************************************************************************************/

    void EditExpense(SummaryItem item)
    {
        backupItem = new SummaryItem
            {
                _id = item._id,
                Title = item.Title,
                Description = item.Description,
                Amount = item.Amount,
                Currency = item.Currency,
                Category = item.Category,
                Date = item.Date,
                UserId = item.UserId
            };
        // Set all other expenses to not editing
        if (expenses == null)
            errorMessage = "Data was not found";
        else
        {
            foreach (var e in expenses)
            {
                e.IsBeingEdited = false;
            }

            // Mark the selected one for editing
            item.IsBeingEdited = true;
        }

    }

    void CancelEdit(SummaryItem expense)
    {
        if (backupItem == null)
            errorMessage = $"Error editing item. Backup might be null";
        else
        {
            // Revert to the original data
            expense.Title = backupItem.Title;
            expense.Description = backupItem.Description;
            expense.Amount = backupItem.Amount;
            expense.Currency = backupItem.Currency;
            expense.Category = backupItem.Category;
            expense.Date = backupItem.Date;

            // Mark as not editing
            expense.IsBeingEdited = false;
        }
    }

    private async void SaveEdit(SummaryItem expense)
    {
        expense.IsBeingEdited = false;
        try
        {
            MongoManipulator.Save(expense);
            await RenderChartsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving expense: {ex.Message}";
        }

    }


    private void ShowDeleteConfirmation(SummaryItem expense)
    {
        itemToConfirmDelete = expense._id;
    }

    private void CancelDelete()
    {
        itemToConfirmDelete = null;
    }

    private async Task ConfirmDelete(SummaryItem expense)
    {
        await DeleteItem(expense);
        itemToConfirmDelete = null;
    }


    private async Task DeleteItem(SummaryItem item)
    {
        try
        {
            if (item.Type == "Expense")
            {
                var expenseItem = item.ToExpense(); // Convert SummaryItem to Expense
                await MongoManipulator.DeleteEntityHelper(expenseItem);
                expenses?.Remove(expenseItem);
                filteredItems = GetFilteredItems(pageNumber, pageSize);
            }
            else if (item.Type == "Income")
            {
                var incomeItem = item.ToIncome(); // Convert SummaryItem to Income
                await MongoManipulator.DeleteEntityHelper(incomeItem);
                incomes?.Remove(incomeItem);
                filteredItems = GetFilteredItems(pageNumber, pageSize); // Update this if necessary
            }

            await RenderChartsAsync(); // Updates JS charts
            StateHasChanged();         // Updates component view
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting item: {ex.Message}";
        }
    }

    #endregion

    #region Filters
    //Search filters
    /******************************************************************************************/


    private void ToggleAmountSort()
    {
        sortByAmount = true;
        selectedSort = (selectedSort == "AmountDesc") ? "AmountAsc" : "AmountDesc";
        filteredItems = GetFilteredItems(pageNumber, pageSize);
    }

    private void ToggleDateSort()
    {
        sortByAmount = false;
        selectedSort = (selectedSort == "DateDesc") ? "DateAsc" : "DateDesc";
        filteredItems = GetFilteredItems(pageNumber, pageSize);
    }

    private async Task ApplySearchFilters()
    {
        if (isSearchCooldown)  // variable to stop spamming search filter
            return;

        isSearchCooldown = true;

        if (!string.IsNullOrWhiteSpace(searchTitle) || !string.IsNullOrWhiteSpace(searchCategory))
        {
            filteredItems = GetFilteredItems(pageNumber, pageSize);
            searchActive = true;
            await RenderChartsAsync();
        }

        await Task.Delay(1000); //How long for each saerch action
        isSearchCooldown = false;

    }

    private async Task ClearFilters()
    {
        searchTitle = "";
        searchCategory = "";
        selectedFilter = "SelectedDates";
        searchActive = false;

        filteredItems = GetFilteredItems(pageNumber, pageSize);
        await RenderChartsAsync();
    }



    #endregion

    #region PageChange

    private int PageChange(int change)
    {
        pageNumber = pageNumber + change;
        filteredItems = GetFilteredItems(pageNumber, pageSize);
        return pageNumber;
    }


    private void OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newSize))
        {
            pageSize = newSize;
            pageNumber = 1;
            filteredItems = GetFilteredItems(pageNumber, pageSize);

        }
    }

    #endregion

    #region Filtering
    //Filtering
    /******************************************************************************************/

    private void FilterToday()
    {
        StartDate = DateTime.Now.Date;
        EndDate = DateTime.Now.Date;
    }

    private void FilterMonthly()
    {
        var today = DateTime.Now.Date;
        // Set start date to the first day of this month
        StartDate = new DateTime(today.Year, today.Month, 1);

        // Calculate the number of days in this month to get the last day
        int lastDay = DateTime.DaysInMonth(today.Year, today.Month);
        EndDate = new DateTime(today.Year, today.Month, lastDay);
    }

    private void FilterYearly()
    {
        var today = DateTime.Now;

        StartDate = new DateTime(today.Year, 1, 1); // January 1st
        EndDate = new DateTime(today.Year, 12, 31, 23, 59, 59); // December 31st, end of day
    }


    private async Task ChangeFilter(string mode)
    {
        selectedFilter = mode;
        filteredItems = GetFilteredItems(pageNumber, pageSize);
        await RenderChartsAsync();
    }


    private DateTime? _startDate = new DateTime(DateTime.Now.Date.Year, DateTime.Now.Date.Month, 1);  // Default values basicly copying the Month logic from FilterMonthly()
    private DateTime? _endDate = new DateTime(DateTime.Now.Date.Year, DateTime.Now.Date.Month, DateTime.DaysInMonth(DateTime.Now.Date.Year, DateTime.Now.Date.Month)); // Default values basicly copying the Month logic from FilterMonthly()

    public DateTime? StartDate
    {
        get => _startDate;
        set
        {
            _startDate = value;

            //if startDate is set higher than end date change end date to match startDate
            if (_startDate.HasValue && _endDate.HasValue && _startDate > _endDate)
            {
                _endDate = _startDate;
                SetDataRange();
            }
            else
                SetDataRange();
        }
    }

    public DateTime? EndDate
    {
        get => _endDate;
        set
        {
            //if startDate is set higher than end date change end date to match startDate
            if (_startDate.HasValue && _endDate.HasValue && value < _startDate.Value)
            {
                _endDate = _startDate;
                SetDataRange();
            }
            else
            {
                _endDate = value;
                SetDataRange();
            }

        }
    }

    private async void SetDataRange()
    {
        if (_startDate.HasValue && _endDate.HasValue)
        {
            await ChangeFilter("SelectedDates");
        }
    }

    //Maybe refactor this? GOes by order adding all the filters
    private List<SummaryItem> GetFilteredItems(int pageNumber, int pageSize)
    {
        var allItems = new List<SummaryItem>();

        if (expenses != null)
        {
            allItems.AddRange(expenses.Select(e => new SummaryItem
                {
                    UserId = e.UserId,
                    Title = e.Title,
                    Description = e.Description,
                    Category = e.Category,
                    Date = e.Date,
                    Amount = e.Amount,
                    Type = "Expense"
                }));
        }

        if (incomes != null)
        {
            allItems.AddRange(incomes.Select(i => new SummaryItem
                {
                    UserId = i.UserId,
                    Title = i.Title,
                    Description = i.Description,
                    Category = i.Category,
                    Date = i.Date,
                    Amount = i.Amount,
                    Type = "Income"
                }));
        }

        // Apply filtering
        IEnumerable<SummaryItem> filtered = allItems;

        ItemCountByDate = filtered.Count();

        if (selectedFilter == "SelectedDates")
        {
            filtered = filtered.Where(e => e.Date.Date >= _startDate && e.Date.Date <= _endDate);
        }

        if (!string.IsNullOrWhiteSpace(searchTitle))
        {
            filtered = filtered.Where(e => e.Title.Contains(searchTitle, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrWhiteSpace(searchCategory))
        {
            filtered = filtered.Where(e => (e.Category ?? "").Contains(searchCategory, StringComparison.OrdinalIgnoreCase));
        }

        // Sorting
        if (sortByAmount)
        {
            filtered = selectedSort == "AmountDesc"
                ? filtered.OrderByDescending(e => e.Amount)
                : filtered.OrderBy(e => e.Amount);
        }
        else
        {
            filtered = selectedSort == "DateDesc"
                ? filtered.OrderByDescending(e => e.Date)
                : filtered.OrderBy(e => e.Date);
        }

        totalExpenses = filtered.Where(e => e.Type == "Expense").Sum(e => e.Amount);
        totalIncome = filtered.Where(e => e.Type == "Income").Sum(e => e.Amount);
        balance = (totalIncome - totalExpenses);

        // Paging
        pagedItems = filtered.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();

        return filtered.ToList();
    }
    #endregion
}
