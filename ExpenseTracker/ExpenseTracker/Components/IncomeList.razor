@using ExpenseTracker.Models.Services
@using ExpenseTracker.Models
@inject IJSRuntime JS
@inject GetItemService GetItemService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using MongoDB.Bson;
@using ExpenseTracker.Models.Utils;


<h3 class="Expense_title" style="margin-bottom:20px">Income List (@_startDate?.ToString("dd/MM/yyyy") - @_endDate?.ToString("dd/MM/yyyy"))</h3>
<!-- Need to fix the layout responsivesness for flexbox in smaller screens-->
<div class="Expense_filterbar" style="display:flex; gap:50px ; margin-bottom:10px">
    <div class="Expense_filterbar_buttons">
        <button class="btn btn-outline-primary me-2" @onclick="FilterToday">Today</button>
        <button class="btn btn-outline-primary me-2" @onclick="FilterMonthly">Monthly</button>
        <button class="btn btn-outline-primary" @onclick="FilterYearly">Yearly</button>
    </div>
    <div class="Date_input_div" style="display:flex; gap:10px">
        <InputDate @bind-Value="StartDate" class="form-control"  style="width:50%"/>
        <InputDate @bind-Value="EndDate" class="form-control" style="width:50%" />
    </div>
</div>


<div class="row">
    <div class="col-md-6">
        <div id="myChart" style="width:100%; height:400px;"></div>
    </div>
    <div class="col-md-6">
        <div id="myBarChart" style="width:100%; height:400px;"></div>
    </div>
</div>
<div class="total-box">
    <p>Total: </p>
    <h3>@totalIncomes €</h3>
</div>
<br />
<div class="expense_list_infobar">
    @if (searchActive)
    {
        <p class="List_count">@(filteredIncomes == null || !filteredIncomes.Any() ? "0 Incomes found" : $"Income count: {pagedIncomes.Count()}")</p>
    }
    <p class="List_count">@(filteredIncomes == null || !filteredIncomes.Any() ? "0 Incomes found" : $"Income count: {IncomeCountByDate}")</p>
    <div class="search_button-container">
        <button class="btn btn-sm btn-success" @onclick="ApplySearchFilters">Search</button>
        @if (searchActive)
        {
            <button type="button" class="btn btn-sm btn-secondary" @onclick="ClearFilters">Clear</button>
        }
    </div>
</div>



@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert" style="display:flex; justify-content:center">
        @errorMessage
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>
                    <div class="filter_by_date_container">
                        Amount
                        <img src="Media/@(selectedSort == "AmountDesc" ? "filter_arrow_desc.png" : "filter_arrow_asc.png")"
                             @onclick="ToggleAmountSort" />
                    </div>
                </th>
                <th>Category</th>
                <th>
                    <div class="filter_by_date_container">
                        Date
                        <img src="Media/@(selectedSort == "DateDesc" ? "filter_arrow_desc.png" : "filter_arrow_asc.png")"
                             @onclick="ToggleDateSort" />
                    </div>
                </th>
                <th>Actions</th>
            </tr>
            <tr>
                <th>
                    <InputText @bind-Value="searchTitle" class="form-control form-control-sm" placeholder="Search..." />
                </th>
                <th>
                    <InputText @bind-Value="searchDescription" class="form-control form-control-sm" placeholder="Search..." />
                </th>
                <th></th>
                <th>
                    <InputText @bind-Value="searchCategory" class=" form-control form-control-sm" placeholder="Search..." />
                </th>
                <th>

                </th>
                <th>
                    <div style="display: flex; align-items: center; gap: 10px;">
                        <select class="form-select form-select-sm" style="width: auto;" @onchange="OnPageSizeChanged">
                            <option value="5" selected="@(pageSize == 5)">5</option>
                            <option value="10" selected="@(pageSize == 10)">10</option>
                            <option value="20" selected="@(pageSize == 20)">20</option>
                            <option value="50" selected="@(pageSize == 50)">50</option>
                        </select>
                    </div>
                </th>
            </tr>
        </thead>
        <tbody>
            @if ((pagedIncomes) != null && (pagedIncomes.Any()))
            {
                @foreach (var income in pagedIncomes)
                {
                    if (income.IsBeingEdited)
                    {
                        <tr>
                            <td><input class="form-control" @bind="income.Title" /></td>
                            <td><input class="form-control" @bind="income.Description" /></td>
                            <td><input type="number" class="form-control" @bind="income.Amount" /></td>
                            <td><input class="form-control" @bind="income.Category" /></td>
                            <td><input type="date" class="form-control" @bind="income.Date" /></td>

                            <td>
                                <div style="display:flex">
                                    <button class="btn btn-success btn-sm me-1" @onclick="() => SaveEdit(income)">Save</button>
                                    <button class="btn btn-secondary btn-sm" @onclick="() => CancelEdit(income)">Cancel</button>
                                </div>
                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td>@income.Title</td>
                            <td>@income.Description</td>
                            <td class="amount_td text-success">@($"{income.Amount}{income.Currency}")</td>
                            <td>@UtilityFunctions.CapitalizeFirstLetter(income.Category)</td>
                            <td>@income.Date.ToLocalTime().ToString("dd/MM/yyyy")</td>
                            <td>
                                @if (incomeToConfirmDelete == income._id)
                                {
                                    <p>Delete the item?</p>
                                    <button class="btn btn-sm btn-danger me-1" @onclick="() => ConfirmDelete(income)">Delete</button>
                                    <button class="btn btn-sm btn-secondary" @onclick="CancelDelete">Cancel</button>
                                }
                                else
                                {
                                    <button class="btn btn-sm btn-primary me-1" @onclick="() => EditExpense(income)">Edit</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteConfirmation(income)">Delete</button>
                                }
                            </td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
    <div class="pagination-controls mt-3" style="display: flex; align-items: center; gap: 10px;">
        <button class="btn btn-sm btn-outline-primary" @onclick="@(() => PageChange(-1))" disabled="@(pageNumber == 1)">Previous</button>
        <span>Page @pageNumber of @Math.Ceiling((double)IncomeCountByDate / pageSize)</span>
        <button class="btn btn-sm btn-outline-primary" @onclick="@(() => PageChange(1))"disabled="@(pageNumber >= Math.Ceiling((double)IncomeCountByDate / pageSize))">Next</button>
    </div>
}

@code {
    //List initializations
    private List<Income>? incomes;
    private List<Income> filteredIncomes = new();
    private List<Income> pagedIncomes = new();

    //Common variables used in initz HTML
    private string selectedFilter = "SelectedDates";  //Default dates when entering page is Monthly  view of starting from 1st  to 30-31st. Initialized below in _endDate & _startDate properties
    private bool shouldRenderCharts = false;
    private string? errorMessage;
    private decimal totalIncomes;
    private int IncomeCountByDate;

    //Edit and Delete variables
    private ObjectId? incomeToConfirmDelete = null;
    private Income? backupIncome;

    //Search field variables
    private string searchTitle = "";
    private string searchDescription = "";
    private string searchCategory = "";
    private bool sortByAmount = false;
    private bool searchActive = false;
    private string selectedSort = "DateAsc"; // "DateAsc", "DateDesc", "AmountAsc", "AmountDesc"
    private bool isSearchCooldown = false;


    //Page variables
    private int pageNumber = 1;
    private int pageSize = 10;


    //Load the initial Expense datea on page reload
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                incomes = await GetItemService.GetUserIncomesAsync(userId);
                filteredIncomes = GetFilteredIncomes(pageNumber, pageSize);
                shouldRenderCharts = true;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldRenderCharts && incomes != null)
        {
            await RenderChartsAsync();

            shouldRenderCharts = false; // prevent infinite rerender
        }
    }

    //Fill the charts with filtered by using IJSRuntime
    private async Task RenderChartsAsync()
    {
        Console.WriteLine(filteredIncomes.ToList());
        var chartData = filteredIncomes
            .GroupBy(e => e.Category?.ToLower())
            .Select(g => new
            {
                category = g.Key,
                amount = g.Sum(e => e.Amount)
            }).ToList();

        await JS.InvokeVoidAsync("renderExpenseChart", "myChart", chartData);
        await JS.InvokeVoidAsync("renderExpenseBarChart", "myBarChart", chartData);
    }

    #region EditDelete
    //Edit and Delete functions
    /******************************************************************************************/

    void EditExpense(Income income)
    {
        backupIncome = new Income
            {
                _id = income._id,
                Title = income.Title,
                Description = income.Description,
                Amount = income.Amount,
                Currency = income.Currency,
                Category = income.Category,
                Date = income.Date,
                UserId = income.UserId
            };
        // Set all other incomes to not editing
        if (incomes == null)
            errorMessage = "Data was not found";
        else
        {
            foreach (var e in incomes)
            {
                e.IsBeingEdited = false;
            }

            // Mark the selected one for editing
            income.IsBeingEdited = true;
        }

    }

    void CancelEdit(Income income)
    {
        if (backupIncome == null)
            errorMessage = $"Error editing item. Backup might be null";
        else
        {
            // Revert to the original data
            income.Title = backupIncome.Title;
            income.Description = backupIncome.Description;
            income.Amount = backupIncome.Amount;
            income.Currency = backupIncome.Currency;
            income.Category = backupIncome.Category;
            income.Date = backupIncome.Date;
            income.UserId = backupIncome.UserId;

            // Mark as not editing
            income.IsBeingEdited = false;
        }
    }

    private async void SaveEdit(Income income)
    {
        income.IsBeingEdited = false;
        try
        {
            MongoManipulator.Save(income);
            await RenderChartsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving expense: {ex.Message}";
        }

    }


    private void ShowDeleteConfirmation(Income income)
    {
        incomeToConfirmDelete = income._id;
    }

    private void CancelDelete()
    {
        incomeToConfirmDelete = null;
    }

    private async Task ConfirmDelete(Income income)
    {
        await DeleteExpense(income);
        incomeToConfirmDelete = null;
    }


    private async Task DeleteExpense(Income income)
    {
        try
        {
            await MongoManipulator.DeleteEntityHelper(income);
            incomes?.Remove(income);
            filteredIncomes = GetFilteredIncomes(pageNumber, pageSize);
            await RenderChartsAsync(); // Updates the JS charts, StateCHange doesnt affect JSRuntime
            StateHasChanged(); // Update the income list
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving income: {ex.Message}";
        }
    }
    #endregion

    #region Filters
    //Search filters
    /******************************************************************************************/


    private void ToggleAmountSort()
    {
        sortByAmount = true;
        selectedSort = (selectedSort == "AmountDesc") ? "AmountAsc" : "AmountDesc";
        filteredIncomes = GetFilteredIncomes(pageNumber, pageSize);
    }

    private void ToggleDateSort()
    {
        sortByAmount = false;
        selectedSort = (selectedSort == "DateDesc") ? "DateAsc" : "DateDesc";
        filteredIncomes = GetFilteredIncomes(pageNumber, pageSize);
    }

    private async Task ApplySearchFilters()
    {
        if (isSearchCooldown)  // variable to stop spamming search filter
            return;

        isSearchCooldown = true;

        if (!string.IsNullOrWhiteSpace(searchTitle) || !string.IsNullOrWhiteSpace(searchDescription) || !string.IsNullOrWhiteSpace(searchCategory))
        {
            filteredIncomes = GetFilteredIncomes(pageNumber, pageSize);
            searchActive = true;
            await RenderChartsAsync();
        }

        await Task.Delay(1000); //How long for each saerch action
        isSearchCooldown = false;

    }

    private async Task ClearFilters()
    {
        searchTitle = "";
        searchDescription = "";
        searchCategory = "";
        selectedFilter = "SelectedDates";
        searchActive = false;

        filteredIncomes = GetFilteredIncomes(pageNumber, pageSize);
        await RenderChartsAsync();
    }



    #endregion

    #region PageChange

    private int PageChange(int change)
    {
        pageNumber = pageNumber + change;
        filteredIncomes = GetFilteredIncomes(pageNumber, pageSize);
        return pageNumber;
    }


    private void OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newSize))
        {
            pageSize = newSize;
            pageNumber = 1;
            filteredIncomes = GetFilteredIncomes(pageNumber, pageSize);

        }
    }

    #endregion

    #region Filtering
    //Filtering
    /******************************************************************************************/

    private void FilterToday()
    {
        StartDate = DateTime.Now.Date;
        EndDate = DateTime.Now.Date;
    }

    private void FilterMonthly()
    {
        var today = DateTime.Now.Date;
        // Set start date to the first day of this month
        StartDate = new DateTime(today.Year, today.Month, 1);

        // Calculate the number of days in this month to get the last day
        int lastDay = DateTime.DaysInMonth(today.Year, today.Month);
        EndDate = new DateTime(today.Year, today.Month, lastDay);
    }

    private void FilterYearly()
    {
        var today = DateTime.Now;

        StartDate = new DateTime(today.Year, 1, 1); // January 1st
        EndDate = new DateTime(today.Year, 12, 31, 23, 59, 59); // December 31st, end of day
    }


    private async Task ChangeFilter(string mode)
    {
        selectedFilter = mode;
        filteredIncomes = GetFilteredIncomes(pageNumber, pageSize);
        await RenderChartsAsync();
    }


    private DateTime? _startDate = new DateTime(DateTime.Now.Date.Year, DateTime.Now.Date.Month, 1);  // Default values basicly copying the Month logic from FilterMonthly()
    private DateTime? _endDate = new DateTime(DateTime.Now.Date.Year, DateTime.Now.Date.Month, DateTime.DaysInMonth(DateTime.Now.Date.Year, DateTime.Now.Date.Month)); // Default values basicly copying the Month logic from FilterMonthly()

    public DateTime? StartDate
    {
        get => _startDate;
        set
        {
            _startDate = value;

            //if startDate is set higher than end date change end date to match startDate
            if (_startDate.HasValue && _endDate.HasValue && _startDate > _endDate)
            {
                _endDate = _startDate;
                SetDataRange();
            }
            else
                SetDataRange();
        }
    }

    public DateTime? EndDate
    {
        get => _endDate;
        set
        {
            //if startDate is set higher than end date change end date to match startDate
            if (_startDate.HasValue && _endDate.HasValue && value < _startDate.Value)
            {
                _endDate = _startDate;
                SetDataRange();
            }
            else
            {
                _endDate = value;
                SetDataRange();
            }

        }
    }

    private async void SetDataRange()
    {
        if (_startDate.HasValue && _endDate.HasValue)
        {
            await ChangeFilter("SelectedDates");
        }
    }


    //Maybe refactor this? GOes by order adding all the filters
    private List<Income> GetFilteredIncomes(int pageNumber, int pageSize)
    {
        if (incomes == null)
            return new List<Income>();

        IEnumerable<Income> filtered = incomes;

        if (selectedFilter == "SelectedDates")
        {
            filtered = filtered.Where(e => e.Date.Date >= _startDate && e.Date.Date <= _endDate);
            IncomeCountByDate = filtered.Count();

        }

        if (!string.IsNullOrWhiteSpace(searchTitle))
        {
            filtered = filtered.Where(e => e.Title.Contains(searchTitle, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrWhiteSpace(searchDescription))
        {
            filtered = filtered.Where(e => (e.Description ?? "").Contains(searchDescription, StringComparison.OrdinalIgnoreCase)); // ?? "" a null check just in case
        }

        if (!string.IsNullOrWhiteSpace(searchCategory))
        {
            filtered = filtered.Where(e => (e.Category ?? "").Contains(searchCategory, StringComparison.OrdinalIgnoreCase)); // ?? "" a null check just in case
        }

        // Sorting logic based on the selected sort criteria (amount or date)
        if (sortByAmount)
        {
            if (selectedSort == "AmountDesc")
            {
                filtered = filtered.OrderByDescending(e => e.Amount);
            }
            else
            {
                filtered = filtered.OrderBy(e => e.Amount);
            }
        }
        else
        {
            if (selectedSort == "DateDesc")
            {
                filtered = filtered.OrderByDescending(e => e.Date);
            }
            else
            {
                filtered = filtered.OrderBy(e => e.Date);
            }
        }

        //Get the filtered dates or saerch sums
        totalIncomes = filtered.Sum(e => e.Amount);
        // Paging
        pagedIncomes = filtered.Skip((pageNumber - 1) * pageSize).Take(pageSize).ToList();

        return filtered.ToList();
    }
    #endregion
}