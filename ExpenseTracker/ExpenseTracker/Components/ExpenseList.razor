@using ExpenseTracker.Models.Services
@using ExpenseTracker.Models
@inject IJSRuntime JS

@inject GetItemService GetItemService
@inject AuthenticationStateProvider AuthenticationStateProvider


<div class="row">
    <div class="col-md-6">
        <div id="myChart" style="width:100%; height:400px;"></div>
    </div>
    <div class="col-md-6">
        <div id="myBarChart" style="width:100%; height:400px;"></div>
    </div>
</div>
<h3>Expense List</h3>
<p>@(expenses == null ? "You have 0 expenses added" : $"expenses count: {expenses.Count}")</p>
@if (expenses == null)
{
    <p>No expenses found</p>
}
else
{
    
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Amount</th>
                <th>Category</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in expenses)
            {
                <tr>
                    <td>@expense.Title</td>
                    <td>@expense.Description</td>
                    <td>@($"{expense.Amount} {expense.Currency}")</td>
                    <td>@(expense.Category)</td>
                    <td>@expense.Date.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>

}



@code {
    private List<Expense>? expenses;
    private List<Income>? incomes;
    private bool shouldRenderCharts = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshExpensesAsync();
        shouldRenderCharts = true; // flag to trigger rendering in next step
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldRenderCharts && expenses != null)
        {
            var chartData = expenses
                .GroupBy(e => e.Category)
                .Select(g => new
                {
                    category = g.Key,
                    amount = g.Sum(e => e.Amount)
                }).ToList();

            await JS.InvokeVoidAsync("renderExpenseChart", "myChart", chartData);
            await JS.InvokeVoidAsync("renderExpenseBarChart", "myBarChart", chartData);

            shouldRenderCharts = false; // prevent infinite rerender
        }
    }

    public async Task RefreshExpensesAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                expenses = await GetItemService.GetUserExpensesAsync(userId);
            }
        }
    }
}

