@using ExpenseTracker.Models.Services
@using ExpenseTracker.Models
@inject IJSRuntime JS
@inject GetItemService GetItemService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using MongoDB.Bson;
@using ExpenseTracker.Models.Utils;


<h3 class="Expense_title" style="margin-bottom:20px">Expense List (@_startDate?.ToString("dd/MM/yyyy") - @_endDate?.ToString("dd/MM/yyyy"))</h3>
<!-- Need to fix the layout responsivesness for flexbox in smaller screens-->
<div class="Expense_filterbar" style="display:flex; gap:50px ; margin-bottom:10px">
    <div class="Expense_filterbar_buttons">
        <button class="btn btn-outline-primary me-2" @onclick="FilterToday">Today</button>
        <button class="btn btn-outline-primary me-2" @onclick="FilterMonthly">Monthly</button>
        <button class="btn btn-outline-primary" @onclick="FilterYearly">Yearly</button>
    </div>
    <div class="Date_input_div" style="display:flex; gap:10px">
        <InputDate @bind-Value="StartDate" class="form-control"  style="width:50%"/>
        <InputDate @bind-Value="EndDate" class="form-control" style="width:50%" />
    </div>
</div>


<div class="row">
    <div class="col-md-6">
        <div id="myChart" style="width:100%; height:400px;"></div>
    </div>
    <div class="col-md-6">
        <div id="myBarChart" style="width:100%; height:400px;"></div>
    </div>
</div>
<div class="total-box">
    <p>Expenses:</p>
    <h3>@filteredExpenses.Sum(e => e.Amount) €</h3>
</div>
<br />
<div class="expense_list_infobar">
    <p class="List_count">@(filteredExpenses == null || !filteredExpenses.Any() ? "0 expenses found" : $"Expenses count: {filteredExpenses.Count}")</p>
    <div class="search_button-container">
        <button class="btn btn-sm btn-success" @onclick="ApplySearchFilters">Search</button>
        <button class="btn btn-sm btn-secondary" @onclick="ClearFilters">Clear</button>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert" style="display:flex; justify-content:center">
        @errorMessage
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Amount</th>
                <th>Category</th>
                <th>
                    <div class="filter_by_date_container">
                        Date
                        <img src="Media/@(sortDescending ? "filter_arrow_asc.png" : "filter_arrow_desc.png")"
                             @onclick="ToggleSort"
                            />
                    </div> 
                </th>
                <th>Actions</th>
            </tr>
            <tr>
                <th>
                    <InputText @bind-Value="searchTitle" class="form-control form-control-sm"  placeholder="Search..." />
                </th>
                <th>
                    <InputText @bind-Value="searchDescription" class="form-control form-control-sm" placeholder="Search..." />
                </th>
                <th></th>
                <th>
                    <InputText @bind-Value="searchCategory" class="form-control form-control-sm" placeholder="Search..." />
                </th>
                <th>
                    
                </th>
                <th>

                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in filteredExpenses)
            {
                if (expense.IsBeingEdited)
                {
                    <tr>
                        <td><input class="form-control" @bind="expense.Title" /></td>
                        <td><input class="form-control" @bind="expense.Description" /></td>
                        <td><input type="number" class="form-control" @bind="expense.Amount" /></td>
                        <td><input class="form-control" @bind="expense.Category" /></td>
                        <td><input type="date" class="form-control" @bind="expense.Date" /></td>

                        <td>
                            <div style="display:flex">
                                <button class="btn btn-success btn-sm me-1" @onclick="() => SaveEdit(expense)">Save</button>
                                <button class="btn btn-secondary btn-sm" @onclick="() => CancelEdit(expense)">Cancel</button>
                            </div>
                        </td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td>@expense.Title</td>
                        <td>@expense.Description</td>
                        <td>@($"{expense.Amount}{expense.Currency}")</td>
                        <td>@UtilityFunctions.CapitalizeFirstLetter(expense.Category)</td>
                        <td>@expense.Date.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</td>
                        <td>
                            @if (expenseToConfirmDelete == expense._id)
                            {
                                <p>Delete the item?</p>
                                <button class="btn btn-sm btn-danger me-1" @onclick="() => ConfirmDelete(expense)">Delete</button>
                                <button class="btn btn-sm btn-secondary" @onclick="CancelDelete">Cancel</button>
                            }
                            else
                            {

                                <button class="btn btn-sm btn-primary me-1" @onclick="() => EditExpense(expense)">Edit</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteConfirmation(expense)">Delete</button>
                            }
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private List<Expense>? expenses;
    private List<Expense> filteredExpenses = new();
    private string selectedFilter = "SelectedDates";  //Default dates when entering page is Monthly  view of starting from 1st  to 30-31st. Initialized below in _endDate & _startDate properties
    private bool shouldRenderCharts = false;
    private ObjectId? expenseToConfirmDelete = null;
    private string? errorMessage;
    private Expense? backupExpense;

    private string searchTitle = "";
    private string searchDescription = "";
    private string searchCategory = "";
    private bool sortDescending = true;


    private void ToggleSort()
    {
        sortDescending = !sortDescending;
        filteredExpenses = GetFilteredExpenses();
        _ = RenderChartsAsync(); // Fire and forget
    }

    private async Task ApplySearchFilters()
    {
        filteredExpenses = GetFilteredExpenses();
        await RenderChartsAsync();
    }

    private async Task ClearFilters()
    {
        searchTitle = "";
        searchDescription = "";
        searchCategory = "";
        sortDescending = true;
        selectedFilter = "SelectedDates";

        filteredExpenses = GetFilteredExpenses();
        await RenderChartsAsync();
    }



    private async void UpdateFilters()
{
    filteredExpenses = GetFilteredExpenses();
    await RenderChartsAsync();
}

    //Load the initial Expense datea on page reload
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                expenses = await GetItemService.GetUserExpensesAsync(userId);
                filteredExpenses = GetFilteredExpenses();
                shouldRenderCharts = true;
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (shouldRenderCharts && expenses != null)
        {
            await RenderChartsAsync();

            shouldRenderCharts = false; // prevent infinite rerender
        }
    }

    //Fill the charts with filtered by using IJSRuntime
    private async Task RenderChartsAsync()
    {
        var chartData = filteredExpenses
            .GroupBy(e => e.Category?.ToLower())
            .Select(g => new
            {
                category = g.Key,
                amount = g.Sum(e => e.Amount)
            }).ToList();

        await JS.InvokeVoidAsync("renderExpenseChart", "myChart", chartData);
        await JS.InvokeVoidAsync("renderExpenseBarChart", "myBarChart", chartData);
    }

    void EditExpense(Expense expense)
    {
        backupExpense = new Expense
            {
                _id = expense._id,
                Title = expense.Title,
                Description = expense.Description,
                Amount = expense.Amount,
                Currency = expense.Currency,
                Category = expense.Category,
                Date = expense.Date,
                UserId = expense.UserId
            };
        // Set all other expenses to not editing
        if (expenses == null)
            errorMessage = "Data was not found";
        else
        {
            foreach (var e in expenses)
            {
                e.IsBeingEdited = false;
            }

            // Mark the selected one for editing
            expense.IsBeingEdited = true;
        }

    }

    void CancelEdit(Expense expense)
    {
        if (backupExpense == null)
            errorMessage = $"Error editing item. Backup might be null";
        else
        {
            // Revert to the original data
            expense.Title = backupExpense.Title;
            expense.Description = backupExpense.Description;
            expense.Amount = backupExpense.Amount;
            expense.Currency = backupExpense.Currency;
            expense.Category = backupExpense.Category;
            expense.Date = backupExpense.Date;
            expense.UserId = backupExpense.UserId;

            // Mark as not editing
            expense.IsBeingEdited = false;
        }
    }

    private async void SaveEdit(Expense expense)
    {
        expense.IsBeingEdited = false;
        try
        {
            MongoManipulator.Save(expense);
            await RenderChartsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving expense: {ex.Message}";
        }

    }


    private void ShowDeleteConfirmation(Expense expense)
    {
        expenseToConfirmDelete = expense._id;
    }

    private void CancelDelete()
    {
        expenseToConfirmDelete = null;
    }

    private async Task ConfirmDelete(Expense expense)
    {
        await DeleteExpense(expense);
        expenseToConfirmDelete = null;
    }
    

    private async Task DeleteExpense(Expense expense)
    {
        try
        {
            await MongoManipulator.DeleteEntityHelper(expense);
            expenses?.Remove(expense);
            Console.WriteLine("Halooo");
            filteredExpenses = GetFilteredExpenses(); // Updates the JS charts, StateCHange doesnt affect JSRuntime
            await RenderChartsAsync();
            StateHasChanged(); // Update the expense list
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving expense: {ex.Message}";
        }
    }

    


    //Filtering
    /******************************************************************************************/

    private void FilterToday()
    {
        StartDate = DateTime.Now.Date;
        EndDate = DateTime.Now.Date;
    }

    private void FilterMonthly()
    {
        var today = DateTime.Now.Date;
        // Set start date to the first day of this month
        StartDate = new DateTime(today.Year, today.Month, 1);

        // Calculate the number of days in this month to get the last day
        int lastDay = DateTime.DaysInMonth(today.Year, today.Month);
        EndDate = new DateTime(today.Year, today.Month, lastDay);
    }

    private void FilterYearly()
    {
        var today = DateTime.Now;

        StartDate = new DateTime(today.Year, 1, 1); // January 1st
        EndDate = new DateTime(today.Year, 12, 31, 23, 59, 59); // December 31st, end of day
    }


    private async Task ChangeFilter(string mode)
    {
        selectedFilter = mode;
        filteredExpenses = GetFilteredExpenses(); 
        await RenderChartsAsync();
    }


    private DateTime? _startDate = new DateTime(DateTime.Now.Date.Year, DateTime.Now.Date.Month, 1);  // Default values basicly copying the Month logic from FilterMonthly()
    private DateTime? _endDate = new DateTime(DateTime.Now.Date.Year, DateTime.Now.Date.Month, DateTime.DaysInMonth(DateTime.Now.Date.Year, DateTime.Now.Date.Month)); // Default values basicly copying the Month logic from FilterMonthly()

    public DateTime? StartDate
    {
        get => _startDate;
        set
        {
            _startDate = value;

            //if startDate is set higher than end date change end date to match startDate
            if (_startDate.HasValue && _endDate.HasValue && _startDate > _endDate)
            {
                _endDate = _startDate;
                SetDataRange();
            }
            else
                SetDataRange();
        }
    }

    public DateTime? EndDate
    {
        get => _endDate;
        set
        {
            //if startDate is set higher than end date change end date to match startDate
            if (_startDate.HasValue && _endDate.HasValue && value < _startDate.Value)
            {
                _endDate = _startDate;
                SetDataRange();
            }
            else
            {
                _endDate = value;
                SetDataRange();
            }
           
        }
    }

    private async void SetDataRange()
    {
        if (_startDate.HasValue && _endDate.HasValue)
        {
            await ChangeFilter("SelectedDates");
        }
    }


    private List<Expense> GetFilteredExpenses()
    {
        if (expenses == null)
            return new List<Expense>();

        IEnumerable<Expense> filtered = expenses;

        if (selectedFilter == "SelectedDates")
        {
            filtered = filtered.Where(e => e.Date.Date >= _startDate && e.Date.Date <= _endDate);
        }

        if (!string.IsNullOrWhiteSpace(searchTitle))
        {
            filtered = filtered.Where(e => e.Title.Contains(searchTitle, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrWhiteSpace(searchDescription))
        {
            filtered = filtered.Where(e => e.Description.Contains(searchDescription, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrWhiteSpace(searchCategory))
        {
            filtered = filtered.Where(e => e.Category.Contains(searchCategory, StringComparison.OrdinalIgnoreCase));
        }

        // Default to descending order
        if (sortDescending)
        {
            filtered = filtered.OrderByDescending(e => e.Date);
        }
        else
        {
            filtered = filtered.OrderBy(e => e.Date);
        }

        return filtered.ToList();
    }
}
